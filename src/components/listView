// 'use client'

// import React, { useState } from 'react'
// import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
// import { Badge } from "@/components/ui/badge"
// import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
// import { Button } from "@/components/ui/button"
// import { Input } from "@/components/ui/input"
// import { ScrollArea } from "@/components/ui/scroll-area"
// import { CalendarIcon, Clock, Search, Tag } from "lucide-react"
// import { format } from "date-fns"

// type Task = {
//   id: string
//   title: string
//   description: string
//   priority: 'Low' | 'Medium' | 'High'
//   assignee: {
//     id: string
//     name: string
//     avatar: string
//   }
//   deadline: Date
//   dateAdded: Date
//   estimatedTime: string
//   tags: string[]
// }

// const tasks: Task[] = [
//   {
//     id: '1',
//     title: 'Implement user authentication',
//     description: 'Set up JWT-based authentication for the application',
//     priority: 'High',
//     assignee: { id: '1', name: 'Alice Johnson', avatar: '/placeholder.svg?height=32&width=32' },
//     deadline: new Date(2023, 5, 30),
//     dateAdded: new Date(2023, 5, 1),
//     estimatedTime: '3 days',
//     tags: ['backend', 'security']
//   },
//   {
//     id: '2',
//     title: 'Design landing page',
//     description: 'Create a responsive design for the new landing page',
//     priority: 'Medium',
//     assignee: { id: '2', name: 'Bob Smith', avatar: '/placeholder.svg?height=32&width=32' },
//     deadline: new Date(2023, 6, 15),
//     dateAdded: new Date(2023, 5, 5),
//     estimatedTime: '5 days',
//     tags: ['design', 'frontend']
//   },
//   {
//     id: '3',
//     title: 'Optimize database queries',
//     description: 'Improve performance of slow database queries',
//     priority: 'Low',
//     assignee: { id: '3', name: 'Charlie Brown', avatar: '/placeholder.svg?height=32&width=32' },
//     deadline: new Date(2023, 7, 1),
//     dateAdded: new Date(2023, 5, 10),
//     estimatedTime: '2 days',
//     tags: ['backend', 'performance']
//   },
// ]

// export default function TaskListView() {
//   const [searchQuery, setSearchQuery] = useState('')

//   const filteredTasks = tasks.filter(task =>
//     task.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
//     task.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
//     task.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))
//   )

//   const getPriorityColor = (priority: Task['priority']) => {
//     switch (priority) {
//       case 'Low': return 'bg-green-100 text-green-800'
//       case 'Medium': return 'bg-yellow-100 text-yellow-800'
//       case 'High': return 'bg-red-100 text-red-800'
//       default: return 'bg-gray-100 text-gray-800'
//     }
//   }

//   return (
//     <Card className="w-full max-w-4xl mx-auto">
//       <CardHeader>
//         <CardTitle className="text-2xl font-bold">Tasks</CardTitle>
//         <div className="relative">
//           <Search className="absolute left-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-500" />
//           <Input
//             placeholder="Search tasks..."
//             value={searchQuery}
//             onChange={(e) => setSearchQuery(e.target.value)}
//             className="pl-8"
//           />
//         </div>
//       </CardHeader>
//       <CardContent>
//         <ScrollArea className="h-[600px] pr-4">
//           {filteredTasks.map((task) => (
//             <div key={task.id} className="mb-4 p-4 bg-white rounded-lg shadow hover:shadow-md transition-shadow">
//               <div className="flex justify-between items-start mb-2">
//                 <h3 className="text-lg font-semibold">{task.title}</h3>
//                 <Badge className={getPriorityColor(task.priority)}>{task.priority}</Badge>
//               </div>
//               <p className="text-sm text-gray-600 mb-2">{task.description}</p>
//               <div className="flex flex-wrap items-center gap-4 text-sm text-gray-500">
//                 <div className="flex items-center">
//                   <Avatar className="h-6 w-6 mr-2">
//                     <AvatarImage src={task.assignee.avatar} alt={task.assignee.name} />
//                     <AvatarFallback>{task.assignee.name.charAt(0)}</AvatarFallback>
//                   </Avatar>
//                   <span>{task.assignee.name}</span>
//                 </div>
//                 <div className="flex items-center">
//                   <CalendarIcon className="h-4 w-4 mr-1" />
//                   <span>{format(task.deadline, 'MMM d, yyyy')}</span>
//                 </div>
//                 <div className="flex items-center">
//                   <Clock className="h-4 w-4 mr-1" />
//                   <span>{task.estimatedTime}</span>
//                 </div>
//               </div>
//               <div className="mt-2 flex flex-wrap gap-2">
//                 {task.tags.map((tag, index) => (
//                   <Badge key={index} variant="secondary" className="text-xs">
//                     <Tag className="h-3 w-3 mr-1" />
//                     {tag}
//                   </Badge>
//                 ))}
//               </div>
//             </div>
//           ))}
//         </ScrollArea>
//       </CardContent>
//     </Card>
//   )
// }






// 'use client'

// import React, { useState } from 'react'
// import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
// import { Badge } from "@/components/ui/badge"
// import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
// import { Button } from "@/components/ui/button"
// import { Input } from "@/components/ui/input"
// import { ScrollArea } from "@/components/ui/scroll-area"
// import { CalendarIcon, Clock, Search, Tag, ChevronDown, ChevronUp } from "lucide-react"
// import { format } from "date-fns"

// type Task = {
//   id: string
//   title: string
//   description: string
//   priority: 'Low' | 'Medium' | 'High'
//   assignee: {
//     id: string
//     name: string
//     avatar: string
//   }
//   deadline: Date
//   dateAdded: Date
//   estimatedTime: string
//   tags: string[]
// }

// const tasks: Task[] = [
//   {
//     id: '1',
//     title: 'Implement user authentication',
//     description: 'Set up JWT-based authentication for the application',
//     priority: 'High',
//     assignee: { id: '1', name: 'Alice Johnson', avatar: '/placeholder.svg?height=32&width=32' },
//     deadline: new Date(2023, 5, 30),
//     dateAdded: new Date(2023, 5, 1),
//     estimatedTime: '3 days',
//     tags: ['backend', 'security']
//   },
//   {
//     id: '2',
//     title: 'Design landing page',
//     description: 'Create a responsive design for the new landing page',
//     priority: 'Medium',
//     assignee: { id: '2', name: 'Bob Smith', avatar: '/placeholder.svg?height=32&width=32' },
//     deadline: new Date(2023, 6, 15),
//     dateAdded: new Date(2023, 5, 5),
//     estimatedTime: '5 days',
//     tags: ['design', 'frontend']
//   },
//   {
//     id: '3',
//     title: 'Optimize database queries',
//     description: 'Improve performance of slow database queries',
//     priority: 'Low',
//     assignee: { id: '3', name: 'Charlie Brown', avatar: '/placeholder.svg?height=32&width=32' },
//     deadline: new Date(2023, 7, 1),
//     dateAdded: new Date(2023, 5, 10),
//     estimatedTime: '2 days',
//     tags: ['backend', 'performance']
//   },
// ]

// export default function ResponsiveTaskListView() {
//   const [searchQuery, setSearchQuery] = useState('')
//   const [expandedTasks, setExpandedTasks] = useState<string[]>([])

//   const filteredTasks = tasks.filter(task =>
//     task.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
//     task.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
//     task.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))
//   )

//   const getPriorityColor = (priority: Task['priority']) => {
//     switch (priority) {
//       case 'Low': return 'bg-green-100 text-green-800'
//       case 'Medium': return 'bg-yellow-100 text-yellow-800'
//       case 'High': return 'bg-red-100 text-red-800'
//       default: return 'bg-gray-100 text-gray-800'
//     }
//   }

//   const toggleTaskExpansion = (taskId: string) => {
//     setExpandedTasks(prev =>
//       prev.includes(taskId)
//         ? prev.filter(id => id !== taskId)
//         : [...prev, taskId]
//     )
//   }

//   return (
//     <Card className="w-full max-w-4xl mx-auto">
//       <CardHeader>
//         <CardTitle className="text-2xl font-bold">Tasks</CardTitle>
//         <div className="relative">
//           <Search className="absolute left-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-500" />
//           <Input
//             placeholder="Search tasks..."
//             value={searchQuery}
//             onChange={(e) => setSearchQuery(e.target.value)}
//             className="pl-8"
//           />
//         </div>
//       </CardHeader>
//       <CardContent>
//         <ScrollArea className="h-[600px] pr-4">
//           {filteredTasks.map((task) => (
//             <div key={task.id} className="mb-4 bg-white rounded-lg shadow hover:shadow-md transition-shadow">
//               <div className="p-4">
//                 <div className="flex justify-between items-start mb-2">
//                   <h3 className="text-lg font-semibold">{task.title}</h3>
//                   <Badge className={getPriorityColor(task.priority)}>{task.priority}</Badge>
//                 </div>
//                 <p className="text-sm text-gray-600 mb-2 line-clamp-2 md:line-clamp-none">{task.description}</p>
//                 <div className="flex flex-wrap items-center gap-4 text-sm text-gray-500">
//                   <div className="flex items-center">
//                     <Avatar className="h-6 w-6 mr-2">
//                       <AvatarImage src={task.assignee.avatar} alt={task.assignee.name} />
//                       <AvatarFallback>{task.assignee.name.charAt(0)}</AvatarFallback>
//                     </Avatar>
//                     <span className="hidden md:inline">{task.assignee.name}</span>
//                   </div>
//                   <div className="flex items-center">
//                     <CalendarIcon className="h-4 w-4 mr-1" />
//                     <span>{format(task.deadline, 'MMM d, yyyy')}</span>
//                   </div>
//                   <div className="hidden md:flex items-center">
//                     <Clock className="h-4 w-4 mr-1" />
//                     <span>{task.estimatedTime}</span>
//                   </div>
//                 </div>
//                 <div className="mt-2 flex flex-wrap gap-2">
//                   {task.tags.map((tag, index) => (
//                     <Badge key={index} variant="secondary" className="text-xs">
//                       <Tag className="h-3 w-3 mr-1" />
//                       {tag}
//                     </Badge>
//                   ))}
//                 </div>
//               </div>
//               <div className="md:hidden">
//                 <Button
//                   variant="ghost"
//                   className="w-full flex items-center justify-center py-2 border-t"
//                   onClick={() => toggleTaskExpansion(task.id)}
//                 >
//                   {expandedTasks.includes(task.id) ? (
//                     <>
//                       <ChevronUp className="h-4 w-4 mr-2" />
//                       Less Details
//                     </>
//                   ) : (
//                     <>
//                       <ChevronDown className="h-4 w-4 mr-2" />
//                       More Details
//                     </>
//                   )}
//                 </Button>
//                 {expandedTasks.includes(task.id) && (
//                   <div className="p-4 border-t">
//                     <p className="text-sm text-gray-600 mb-2">{task.description}</p>
//                     <div className="flex items-center gap-2 text-sm text-gray-500 mb-2">
//                       <Clock className="h-4 w-4" />
//                       <span>Estimated Time: {task.estimatedTime}</span>
//                     </div>
//                     <div className="flex items-center gap-2 text-sm text-gray-500">
//                       <CalendarIcon className="h-4 w-4" />
//                       <span>Date Added: {format(task.dateAdded, 'MMM d, yyyy')}</span>
//                     </div>
//                   </div>
//                 )}
//               </div>
//             </div>
//           ))}
//         </ScrollArea>
//       </CardContent>
//     </Card>
//   )
// }